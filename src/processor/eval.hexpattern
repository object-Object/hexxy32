#include "../macros/bytes.hexpattern"
#include "../macros/heaps.hexpattern"
#include "../macros/memory.hexpattern"
#include "../macros/registers.hexpattern"

{
    // data injected during bootstrap
    {
        Bookkeeper's Gambit: - // trap handlers
        Bookkeeper's Gambit: - // instruction handlers
        Bookkeeper's Gambit: - // decoders
    }
    Flock's Disintegration
    Set Breakpoint After

    // get program counter and save tentative next program counter
    Muninn's Reflection
    Gemini Decomposition
    Numerical Reflection: 32
    Selection Distillation

    Undertaker's Gambit
    Numerical Reflection: 4
    Additive Distillation

    Numerical Reflection: 33
    Jester's Gambit
    Surgeon's Exaltation
    Huginn's Gambit

    // load instruction
    Load Word
    Swap Endianness

    // funct7 (maybe)
    Gemini Decomposition
    Numerical Reflection: 2
    Numerical Reflection: 25
    Power Distillation
    Division Distillation
    Floor Purification

    // funct3 (maybe)
    Prospector's Gambit
    Gemini Decomposition
    Numerical Reflection: 2
    Numerical Reflection: 12
    Power Distillation
    Division Distillation
    Floor Purification
    Numerical Reflection: 8 // 2^3
    Modulus Distillation

    // opcode
    Jester's Gambit
    Numerical Reflection: 128 // 2^7
    Modulus Distillation

    // check if funct3 should be used
    {
        // table 1: opcodes that use funct3
        // [99, 3, 35, 23, 51, 15, 115]
        Bookkeeper's Gambit: --
    }
    Flock's Disintegration

    Prospector's Gambit
    Locator's Distillation
    Numerical Reflection: 1
    Additive Distillation
    Augur's Purification

    Rotation Gambit
    Numerical Reflection: 0
    Augur's Exaltation
    Rotation Gambit II

    // check if funct7 should be used
    {
        // table 2: opcodes that use funct7
        // [23, 51, 115]
        Bookkeeper's Gambit: ---
    }
    Flock's Disintegration

    Prospector's Gambit
    Locator's Distillation
    Numerical Reflection: 1
    Additive Distillation
    Augur's Purification

    Rotation Gambit
    Numerical Reflection: 0
    Augur's Exaltation
    Jester's Gambit
    Rotation Gambit II

    // get opcode index
    Numerical Reflection: 3
    Flock's Gambit

    {
        // table 3: [[opcode, funct3, funct7], ...]
        // [[55, 0, 0], ..., [99, 0, 0], [99, 1, 0], ...]
        Bookkeeper's Gambit: ----
    }
    Flock's Disintegration

    Jester's Gambit
    Locator's Distillation

    // get instruction type decoder
    Rotation Gambit
    Prospector's Gambit

    {
        // table 4: [decoder, ...]
        // [4, 4, 5, 1, 3, ...]
        Bookkeeper's Gambit: -----
    }
    Flock's Disintegration

    Jester's Gambit
    Selection Distillation
    Selection Distillation
    
    // get instruction handler
    Numerical Reflection: 3
    Fisherman's Gambit
    Rotation Gambit
    Selection Distillation
    
    // decode and execute instruction
    {
        Set Breakpoint After // break after decoding
    }
    Jester's Gambit
    Additive Distillation
    Additive Distillation
    Set Breakpoint After
    Hermes' Gambit

    // handle traps
    Numerical Reflection: 34
    Read Register
    Gemini Decomposition
    Augur's Purification
    {
        // if falsy
        Bookkeeper's Gambit: vv

        // if truthy
        Speaker's Decomposition
        Rotation Gambit
        Jester's Gambit
        Selection Distillation
        Hermes' Gambit
    }
    Speaker's Decomposition
    Augur's Exaltation
    Hermes' Gambit

    // update program counter
    Muninn's Reflection
    Numerical Reflection: 32
    Prospector's Gambit
    Numerical Reflection: 33
    Selection Distillation
    Surgeon's Exaltation
    Huginn's Gambit
}
