#include "./heaps.hexpattern"
#include "../types/hexcasting.hexpattern"

#define Load Page = int -> list
// address -> memory page
{
    // addresses are byte-aligned, but we store 4 bytes in each index of the heap
    Numerical Reflection: 4
    Division Distillation
    Floor Purification

    Numerical Reflection: 19 // heap size
    Gemini Decomposition
    Locate Heap
    Encyclopedist's Assistant

    Bookkeeper's Gambit: v-
    Ritualist's Purification
}

#define Load Word (EAST aqqqqqdaqaawaa) = int -> int
// address -> word (4 bytes)
{
    // addresses are byte-aligned, but we store 4 bytes in each index of the heap
    Numerical Reflection: 4
    Division Distillation
    Floor Purification

    Numerical Reflection: 19 // heap size
    Gemini Decomposition
    Locate Heap
    Encyclopedist's Exaltation
}

#define Load Byte (EAST aqqqqqdaqaaw) = int -> int
// address -> byte
{
    Gemini Decomposition
    Load Word

    // 2^((3 - (address % 4)) * 8)
    Numerical Reflection: 2

    Rotation Gambit
    Numerical Reflection: 4
    Modulus Distillation

    Numerical Reflection: 3
    Jester's Gambit
    Subtractive Distillation

    Numerical Reflection: 8
    Multiplicative Distillation

    Power Distillation
    Division Distillation
    Floor Purification

    Numerical Reflection: 256 // 2^8
    Modulus Distillation
}

#define Store Word (EAST deeeeewaqaawaa) = int, int ->
// address, word (4 bytes) ->
{
    Jester's Gambit
    Numerical Reflection: 4
    Division Distillation
    Floor Purification

    Numerical Reflection: 19 // heap size
    Gemini Decomposition
    Locate Heap
    Encyclopedist's Gambit
}
