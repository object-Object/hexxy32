#include "./bytes.hexpattern"
#include "./registers.hexpattern"

#define Decode Instruction: R = num -> num, num, num, num
// instruction -> rd, rs1, rs2
{
    // rd
    Numerical Reflection: 11
    Numerical Reflection: 7
    Slice Integer II
    
    // rs1
    Jester's Gambit
    Numerical Reflection: 3
    Logical Shift Right
    Numerical Reflection: 5
    Split Integer
    Read Register
    
    // rs2
    Jester's Gambit
    Numerical Reflection: 5
    Truncate Integer
    Read Register
}

#define Decode Instruction: I = num -> num, num, num
// instruction -> rd, rs1, imm
{
    // rd
    Numerical Reflection: 11
    Numerical Reflection: 7
    Slice Integer II
    
    // rs1
    Jester's Gambit
    Numerical Reflection: 3
    Logical Shift Right
    Numerical Reflection: 5
    Split Integer
    Read Register

    // imm
    Jester's Gambit
    Numerical Reflection: 12
    Extend Sign
}

#define Decode Instruction: S = num -> num, num, num
// instruction -> imm, rs1, rs2
{
    // imm[4:0]
    Numerical Reflection: 11
    Numerical Reflection: 7
    Slice Integer II
    
    // rs1
    Jester's Gambit
    Numerical Reflection: 3
    Logical Shift Right
    Numerical Reflection: 5
    Split Integer
    Read Register
    
    // rs2
    Jester's Gambit
    Numerical Reflection: 5
    Split Integer
    Read Register

    // (imm[11:5] << 5) + imm[4:0]
    Jester's Gambit
    Numerical Reflection: 5
    Logical Shift Left
    Numerical Reflection: 4
    Fisherman's Gambit
    Additive Distillation

    // imm
    Numerical Reflection: 12
    Extend Sign
    
    Rotation Gambit II
}

#define Decode Instruction: B = num -> num, num, num
// instruction -> imm, rs1, rs2
{
    // imm[11] << 11
    Numerical Reflection: 7
    Logical Shift Right
    Numerical Reflection: 1
    Split Integer
    Numerical Reflection: 11
    Logical Shift Left
    
    // imm[4:1] << 1
    Jester's Gambit
    Numerical Reflection: 4
    Split Integer
    Numerical Reflection: 1
    Logical Shift Left
    
    // rs1
    Jester's Gambit
    Numerical Reflection: 3
    Logical Shift Right
    Numerical Reflection: 5
    Split Integer
    Read Register
    
    // rs2
    Jester's Gambit
    Numerical Reflection: 5
    Split Integer
    Read Register

    // imm[10:5] << 5
    Jester's Gambit
    Numerical Reflection: 6
    Split Integer
    Numerical Reflection: 5
    Logical Shift Left

    // imm[12] << 12
    Jester's Gambit
    Numerical Reflection: 12
    Logical Shift Left

    // imm
    Numerical Reflection: 289 // dcfeba
    Swindler's Gambit
    
    Additive Distillation
    Additive Distillation
    Additive Distillation

    Numerical Reflection: 13
    Extend Sign

    Rotation Gambit II
}

#define Decode Instruction: U = num -> num, num
// instruction -> rd, imm
{
    // rd
    Numerical Reflection: 11
    Numerical Reflection: 7
    Slice Integer II

    // imm
    Jester's Gambit
    Numerical Reflection: 12
    Logical Shift Left
}

#define Decode Instruction: J = num -> num, num
// instruction -> rd, imm
{
    // rd
    Numerical Reflection: 11
    Numerical Reflection: 7
    Slice Integer II

    // imm[19:12] << 12
    Jester's Gambit
    Numerical Reflection: 8
    Split Integer
    Numerical Reflection: 12
    Logical Shift Left
    
    // imm[11] << 11
    Jester's Gambit
    Numerical Reflection: 1
    Split Integer
    Numerical Reflection: 11
    Logical Shift Left
    
    // imm[10:1] << 1
    Jester's Gambit
    Numerical Reflection: 10
    Split Integer
    Numerical Reflection: 1
    Logical Shift Left
    
    // imm[20] << 20
    Jester's Gambit
    Numerical Reflection: 20
    Logical Shift Left

    // imm
    Additive Distillation
    Additive Distillation
    Additive Distillation

    Numerical Reflection: 21
    Extend Sign
}
