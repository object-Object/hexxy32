#define Logical Shift Left (SOUTH_WEST qqae) = num, num -> num
// value, bits to shift -> shifted value
// does not check for overflow
{
    Numerical Reflection: 2
    Jester's Gambit
    Power Distillation
    Multiplicative Distillation
}

#define Logical Shift Right (SOUTH_EAST eedq) = num, num -> num
// value, bits to shift -> shifted value
{
    Numerical Reflection: 2
    Jester's Gambit
    Power Distillation
    Division Distillation
    Floor Purification
}

#define Truncate Integer (NORTH_EAST addwaadqaa) = num, num -> num
// value, length in bits -> truncated value
// eg. truncate(1110_2, 2) = 10
{
    Numerical Reflection: 2
    Jester's Gambit
    Power Distillation
    Modulus Distillation
}

#define Split Integer (EAST aqwaqaa) = num, num -> num
// value, length in bits -> value[:length], value[length-1:]
// eg. truncate2(0110_2, 2) = 01, 10
{
    Dioscuri Gambit
    Logical Shift Right
    Rotation Gambit II
    Truncate Integer
}

#define Slice Integer (NORTH_WEST qaeaqwdedd) = num, num, num -> num
// value, left bound, right bound -> value[left:right]
// both bounds are inclusive
// left >= right, eg. num[11:0] is the lower 12 bits of num
{
    Undertaker's Gambit
    Subtractive Distillation
    Numerical Reflection: 1
    Additive Distillation
    
    Rotation Gambit II
    Logical Shift Right

    Jester's Gambit
    Truncate Integer
}

#define Slice Integer II (SOUTH_WEST edqdewaqaa) = num, num, num -> num, num
// value, left bound, right bound -> value[:left+1], value[left:right]
{
    Undertaker's Gambit
    Subtractive Distillation
    Numerical Reflection: 1
    Additive Distillation
    
    Rotation Gambit II
    Logical Shift Right

    Jester's Gambit
    Split Integer
}

#define Two's Complement Purification = num -> num
// https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html#whyworks
{
    Numerical Reflection: 2
    Numerical Reflection: 32
    Power Distillation
    Jester's Gambit
    Subtractive Distillation
    Numerical Reflection: 32
    Truncate Integer
}

#define Convert Unsigned to Signed = num -> num
{
    // two's complement numbers are negative if the leftmost bit is 1, ie. >=2^31
    Gemini Decomposition
    Numerical Reflection: 2
    Numerical Reflection: 31
    Power Distillation
    Maximus Distillation

    Prospector's Gambit
    Two's Complement Purification
    Numerical Reflection: -1
    Multiplicative Distillation

    Rotation Gambit
    Augur's Exaltation
}

#define Convert Signed to Unsigned = num -> num
{
    Gemini Decomposition
    Numerical Reflection: 0
    Minimus Distillation

    Prospector's Gambit
    Length Purification
    Two's Complement Purification

    Rotation Gambit
    Augur's Exaltation
}

#define Convert Endian (NORTH_EAST aawddeeaqaa) = num -> num
// converts a little endian 32 bit number to big endian, or vice versa
{
    Numerical Reflection: 8
    Split Integer
    Numerical Reflection: 24
    Logical Shift Left
    
    Jester's Gambit
    Numerical Reflection: 8
    Split Integer
    Numerical Reflection: 16
    Logical Shift Left
    
    Jester's Gambit
    Numerical Reflection: 8
    Split Integer
    Numerical Reflection: 8
    Logical Shift Left
    
    Additive Distillation
    Additive Distillation
    Additive Distillation
}

#define Extend Sign = num, num -> num
// value, length in bits of value -> sign-extended value
{
    // sign bit
    Dioscuri Gambit
    Numerical Reflection: 1
    Subtractive Distillation
    Logical Shift Right

    // 2^(32-len) * sign
    Prospector's Gambit
    Numerical Reflection: 2
    Numerical Reflection: 32
    Rotation Gambit
    Subtractive Distillation
    Power Distillation
    Multiplicative Distillation

    // (extended sign << len) + value
    Logical Shift Left
    Additive Distillation
}
